########################################################
### READ THROUGH AND CHANGE THE DEFAULT VALUES BELOW ###
### BEFORE COMPILING.                                ###
########################################################


# Choose your OS here: linux or mac
OS = linux

# Choose your compilers here
# GNU compiler
FC = gfortran
CC = gcc
# Intel compiler
# FC = ifort
# CC = icc
# MPI wrapper for intel compiler (the case where mpif90 wraps gfortran instead is not supported yet)
# FC = mpif90
# CC = mpicc

### Local library paths (change to suit your system if any of the libs are not in standard paths) ###
LIB_CFITSIO=.
LIB_WCS=.
LIB_FFTW=.
INC_FFTW=/usr/include
LAPACKL=-llapack -lblas
INC_WCS=../WCSLIB/wcslib-4.19

### Don't mess with anthing below this line ###

MODULE = module
ifeq ($(FC), mpif90)
 ifeq ($(OS), linux)
  FFLAGS = -O3 -w90 -fpp -DMPI -DINTEL -i_dynamic -parallel -openmp -lpthread -warn all -check bounds -check format -check output_conversion -check pointers -check stack -check uninit
 else
  #for Mac
  FFLAGS = -O3 -w90 -warn nogeneral  -vec-report0 -fpp -shared-intel -cxxlib -parallel -openmp -lpthread -check bounds -check format -check output_conversion -check pointers -check stack -check uninit
 endif
else
 ifeq ($(FC), ifort)
	 ifeq ($(OS), linux)
	  #FFLAGS = -g  -O3 -w90 -fpp  -i_dynamic
	  FFLAGS = -O3 -w90 -fpp  -i_dynamic -parallel -openmp -lpthread -check bounds -check format -check output_conversion -check pointers -check stack -check uninit
	 else
	  #for Mac (stack size increased to 2 GB)
	  FFLAGS = -O3 -w90 -warn nogeneral  -vec-report0 -fpp -shared-intel -cxxlib -Wl,-search_paths_first
	 endif
 else
	FFLAGS = -O2 -Wall -ffixed-line-length-none -ffree-line-length-none -cpp
  MODULE = J
 endif
endif
FCFLAGS = $(FFLAGS)
FOPT = $(FFLAGS)

#Optimisation level, eg: -O3 -xB, does not have any effect on my centrino
#-opt_report -opt_report_phase all
OPT=
#OR debug level: -g(n=1,2,3)
DEBUG=

export FC FCFLAGS FFLAGS FOPT CC CFLAGS CPPC CXXFLAGS MODULE

### Library paths that you should not change ###

LIB_DM=../dm/lib
LIB_NS=../multinest
LIB_DE=../Diver/lib
INC_DE=../Diver/build
LIB_FLAT=../flatlib/lib
BUILD_FLAT=../flatlib/build
CONTRIB_FLAT=../flatlib/contrib
LIB_TSPACK=../TSPACK

export LIB_CFITSIO LIB_FFTW INC_FFTW

OBJS =   fermi_utils.o numerical_routines.o inifile.o utils.o \
         settings.o typedef.o \
         paramdef.o fermi_ptsrc.o fermi_bg.o fermi_ini.o likedata.o \
         propose.o calclike.o postprocess.o MC_DM.o

OBJFILES = $(OBJS) driver.o

mnde_OBJFILES = $(OBJS) nestwrap.o diverwrap.o driver_mnde.o

TESTOBJ =  $(OBJS) tester.o

DDOBJ 	= typedef.o DDbound.o

PNAME1 = dmbayes

PNAME2 = dmbayes_mnde

PLOTFILES = inifile.o utils.o settings.o  typedef.o  paramdef.o \
	    likedata.o mcsamples.o matlab.o smplots.o GetPlots.o


LIBS =  $(LIB_COMP) \
	-L$(LIB_DM) -ldm \
	-L$(LIB_DE) -ldiver \
	-L$(LIB_FLAT) -lflatlib \
	-L$(LIB_CFITSIO) -lcfitsio \
	-L$(LIB_FFTW) -lfftw3 -lm \
	-L$(LIB_WCS) -lwcs \
	-L$(LIB_TSPACK) -lTSPACK \
	$(LAPACKL)

TYPEDEF = typedef.f90 fermi_utils.f90

default : $(PNAME2)

fort: typedef $(PNAME1) $(PNAME2)


all:  flatlib typedef dmlib tspack nestlib diver $(PNAME2) tester


# PS - added include paths for FLATlib, CMLIB and Diver module files
%.o: %.f90
	$(FC) $(FFLAGS) -I$(LIB_NS) -I$(INC_DE) -I$(BUILD_FLAT) -I$(INC_WCS) -I$(CONTRIB_FLAT)/CUBPACK/build/Core -c $*.f90

# PS - added include paths for FLATlib, CMLIB and Diver module files
%.o: %.F90
	$(FC) $(FFLAGS) -I$(LIB_NS) -I$(INC_DE) -I$(BUILD_FLAT) -I$(INC_WCS) -I$(CONTRIB_FLAT)/CUBPACK/build/Core -c $*.F90


# library dm.a for dark matter and other observables computations
dmlib:
	cd ../dm ; $(MAKE) all

# library flatlib.a for fermi irpfs
flatlib:
	cd ../flatlib ; $(MAKE) all

flataverage:
	cd ../flatlib ; $(MAKE) flataverage

tspack:
	cd ../TSPACK; $(MAKE) FF="$(FC)" FOPT="$(FOPT)"

# library libnest3.a for the nested sampler
nestlib:
	cd ../multinest; $(MAKE) all

diver:
	cd ../Diver; $(MAKE) FF="$(FC)" CC="$(CC)" MODULE="$(MODULE)" FOPT="$(FOPT)" libdiver.a


$(PNAME1): flatlib tspack typedef dmlib $(OBJFILES)
	$(FC) -o ../$(PNAME1)  $(OBJFILES) $(LIBS) $(FFLAGS)

$(PNAME2): flatlib tspack nestlib diver typedef dmlib $(mnde_OBJFILES)
	$(FC) -o ../$(PNAME2)  $(mnde_OBJFILES)  -L$(LIB_NS) -lnest3 $(LIBS) $(FFLAGS)


typedef	: $(TYPEDEF)
	$(FC) -I$(BUILD_FLAT) -I$(CONTRIB_FLAT)/CUBPACK/build/Core -c $(TYPEDEF)

tester: flatlib tspack typedef dmlib $(TESTOBJ)
	$(FC) -o ../tester  $(TESTOBJ) $(LIBS) $(FFLAGS)

cleanall:
	$(MAKE) clean clean_dm clean_nested clean_de clean_flatlib clean_tspack


clean: clean_sb

clean_sb:
	rm -f *.o *.mod *.d *.pc *.obj ../core ../$(PNAME1)  ../$(PNAME2) ../tester ../getplots

clean_dm:
	cd ../dm; $(MAKE) clean ;

clean_nested:
	cd ../multinest; $(MAKE) clean ;

clean_de:
	cd ../Diver; $(MAKE) clean ;

clean_flatlib:
	cd ../flatlib; $(MAKE) clean ;

clean_tspack:
	cd ../TSPACK; $(MAKE) clean ;

getplots: $(PLOTFILES)
	$(FC) -o ../getplots $(PLOTFILES) $(LAPACKL) $(FFLAGS)

